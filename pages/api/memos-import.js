/**
 * Next.js API Ë∑ØÁî±ÔºöÂ§ÑÁêÜ Memos Êï∞ÊçÆÂ∫ìÊñá‰ª∂ÂØºÂÖ•
 * Âú®ÊúçÂä°Âô®Á´ØËß£Êûê SQLite Êï∞ÊçÆÂ∫ìÔºåÈÅøÂÖçÊµèËßàÂô®ÁéØÂ¢ÉÁöÑÂ§çÊùÇÈÖçÁΩÆ
 */
import sqlite3 from 'sqlite3';
import fs from 'fs';
import path from 'path';
import { IncomingForm } from 'formidable';
import { getDatabase } from '../../lib/server/database-simple.js';

// ÈÖçÁΩÆ API Ë∑ØÁî±‰∏çËß£Êûê bodyÔºåËÆ© formidable Â§ÑÁêÜ
export const config = {
  api: {
    bodyParser: false,
    responseLimit: false, // Á¶ÅÁî®ÂìçÂ∫îÂ§ßÂ∞èÈôêÂà∂
    externalResolver: true, // ÂëäËØâ Next.js Ëøô‰∏™ API ÂèØËÉΩÈúÄË¶ÅËæÉÈïøÊó∂Èó¥
  },
  maxDuration: 300, // 5ÂàÜÈíüË∂ÖÊó∂ÈôêÂà∂
};

// Ëß£Êûê‰∏ä‰º†ÁöÑÊï∞ÊçÆÂ∫ìÊñá‰ª∂
async function parseMemosDatabase(dbPath) {
  return new Promise((resolve, reject) => {
    const diagnostics = []; // Êî∂ÈõÜËØäÊñ≠‰ø°ÊÅØ
    
    const db = new sqlite3.Database(dbPath, sqlite3.OPEN_READONLY, (err) => {
      if (err) {
        reject(new Error(`Êó†Ê≥ïÊâìÂºÄÊï∞ÊçÆÂ∫ì: ${err.message}`));
        return;
      }
    });

    // Á°Æ‰øùËÉΩËØªÂèñ WAL Êñá‰ª∂‰∏≠ÁöÑÊï∞ÊçÆ - Âº∫Âà∂ÂÖ≥Èó≠Âπ∂ÈáçÊñ∞ÊâìÂºÄÊï∞ÊçÆÂ∫ì
    db.close((closeErr) => {
      if (closeErr) {
        console.warn('ÂÖ≥Èó≠Êï∞ÊçÆÂ∫ìÊó∂Âá∫Èîô:', closeErr.message);
      }
      
      // ÈáçÊñ∞ÊâìÂºÄÊï∞ÊçÆÂ∫ìÔºåÂº∫Âà∂ÂêàÂπ∂WAL
      const dbReopen = new sqlite3.Database(dbPath, sqlite3.OPEN_READONLY, (err) => {
        if (err) {
          reject(new Error(`ÈáçÊñ∞ÊâìÂºÄÊï∞ÊçÆÂ∫ìÂ§±Ë¥•: ${err.message}`));
          return;
        }
      });

      dbReopen.serialize(() => {
        // Âº∫Âà∂WALÊ®°ÂºèÂπ∂ÊâßË°åÂÆåÊï¥Ê£ÄÊü•ÁÇπ
        dbReopen.run("PRAGMA journal_mode = WAL;");
        dbReopen.run("PRAGMA wal_checkpoint(RESTART);", (err) => {
          if (err) {
            console.warn('RESTART WALÊ£ÄÊü•ÁÇπÂ§±Ë¥•ÔºåÂ∞ùËØïTRUNCATE:', err.message);
            diagnostics.push(`‚ö†Ô∏è RESTART WALÊ£ÄÊü•ÁÇπÂ§±Ë¥•: ${err.message}`);
            
            dbReopen.run("PRAGMA wal_checkpoint(TRUNCATE);", (err2) => {
              if (err2) {
                console.warn('TRUNCATE WALÊ£ÄÊü•ÁÇπÂ§±Ë¥•Ôºå‰ΩøÁî®FULL:', err2.message);
                dbReopen.run("PRAGMA wal_checkpoint(FULL);");
                diagnostics.push(`‚ö†Ô∏è ‰ΩøÁî®FULL WALÊ£ÄÊü•ÁÇπ‰Ωú‰∏∫ÂêéÂ§á`);
              } else {
                diagnostics.push('‚úÖ TRUNCATE WALÊ£ÄÊü•ÁÇπÂÆåÊàê');
              }
            });
          } else {
            diagnostics.push('‚úÖ RESTART WALÊ£ÄÊü•ÁÇπÂÆåÊàêÔºåÂº∫Âà∂ÂêàÂπ∂ÊâÄÊúâWALÊï∞ÊçÆ');
          }
        });

        // ËÆæÁΩÆÂÆåÂÖ®ÂêåÊ≠•Âπ∂Âà∑Êñ∞ÁºìÂ≠ò
        dbReopen.run("PRAGMA synchronous = FULL;");
        dbReopen.run("PRAGMA cache_size = -64000;"); // 64MBÁºìÂ≠ò
        diagnostics.push('‚úÖ ÈáçÊñ∞ÊâìÂºÄÊï∞ÊçÆÂ∫ìÔºåÂº∫Âà∂ËØªÂèñÊâÄÊúâWALÊï∞ÊçÆ');

      // È¶ñÂÖàËé∑ÂèñËµÑÊ∫êÊï∞ÊçÆ
      const resourceQuery = `
        SELECT id, uid, filename, blob, type, size, memo_id
        FROM resource
        ORDER BY id ASC
      `;

      dbReopen.all(resourceQuery, [], (err, resourceRows) => {
        if (err) {
          dbReopen.close();
          reject(new Error(`Êü•ËØ¢ËµÑÊ∫êÂ§±Ë¥•: ${err.message}`));
          return;
        }

      // ÊûÑÂª∫ËµÑÊ∫êÊò†Â∞Ñ
      const resourcesMap = new Map();
      resourceRows.forEach(row => {
        if (row.memo_id) {
          if (!resourcesMap.has(row.memo_id)) {
            resourcesMap.set(row.memo_id, []);
          }
          resourcesMap.get(row.memo_id).push({
            id: row.id,
            uid: row.uid,
            filename: row.filename,
            blob: row.blob,
            type: row.type,
            size: row.size
          });
        }
      });

      // ÂÖàÊü•ËØ¢ÊâÄÊúâËÆ∞ÂΩïÁöÑÁä∂ÊÄÅÂàÜÂ∏ÉÁî®‰∫éË∞ÉËØï
      const statusQuery = `
        SELECT row_status, COUNT(*) as count 
        FROM memo 
        GROUP BY row_status
      `;
      
      // ÂêåÊó∂Êü•ËØ¢ÊÄªÊï∞Á°ÆËÆ§
      const totalQuery = `SELECT COUNT(*) as total FROM memo`;
      
      dbReopen.all(statusQuery, [], (err, statusRows) => {
        if (err) {
          console.error('Êü•ËØ¢Áä∂ÊÄÅÂàÜÂ∏ÉÂ§±Ë¥•:', err);
          diagnostics.push(`‚ùå Êü•ËØ¢Áä∂ÊÄÅÂàÜÂ∏ÉÂ§±Ë¥•: ${err.message}`);
        } else {
          console.log('üìä Êï∞ÊçÆÂ∫ì‰∏≠ÁöÑËÆ∞ÂΩïÁä∂ÊÄÅÂàÜÂ∏É:');
          diagnostics.push('üìä Êï∞ÊçÆÂ∫ì‰∏≠ÁöÑËÆ∞ÂΩïÁä∂ÊÄÅÂàÜÂ∏É:');
          let totalInDb = 0;
          statusRows.forEach(row => {
            const msg = `  ${row.row_status}: ${row.count} Êù°`;
            console.log(msg);
            diagnostics.push(msg);
            totalInDb += row.count;
          });
          const totalMsg = `  ÊÄªËÆ°: ${totalInDb} Êù°ËÆ∞ÂΩï`;
          console.log(totalMsg);
          diagnostics.push(totalMsg);
        }
        
        // Á°ÆËÆ§ÊÄªÊï∞
        dbReopen.get(totalQuery, [], (err, totalRow) => {
          if (!err) {
            const msg = `üîç Áõ¥Êé•Êü•ËØ¢ÊÄªÊï∞Á°ÆËÆ§: ${totalRow.total} Êù°`;
            console.log(msg);
            diagnostics.push(msg);
          }
        });
        
        // Ê£ÄÊü•Â≠óÊÆµÂÆåÊï¥ÊÄß
        const fieldCheckQuery = `
          SELECT 
            COUNT(*) as total,
            COUNT(id) as has_id,
            COUNT(created_ts) as has_created_ts,
            COUNT(updated_ts) as has_updated_ts,
            COUNT(row_status) as has_row_status
          FROM memo
        `;
        
        dbReopen.get(fieldCheckQuery, [], (err, fieldResult) => {
          if (!err) {
            console.log('üìä Â≠óÊÆµÂÆåÊï¥ÊÄßÊ£ÄÊü•:');
            diagnostics.push('üìä Â≠óÊÆµÂÆåÊï¥ÊÄßÊ£ÄÊü•:');
            const msgs = [
              `  ÊÄªËÆ∞ÂΩïÊï∞: ${fieldResult.total}`,
              `  Êúâ id: ${fieldResult.has_id}`,
              `  Êúâ created_ts: ${fieldResult.has_created_ts}`,
              `  Êúâ updated_ts: ${fieldResult.has_updated_ts}`,
              `  Êúâ row_status: ${fieldResult.has_row_status}`
            ];
            msgs.forEach(msg => {
              console.log(msg);
              diagnostics.push(msg);
            });
          }
        });
        
        // ‰∏¥Êó∂ËØäÊñ≠ÔºöÊ£ÄÊü•ÊâÄÊúâÂèØËÉΩÁöÑÁä∂ÊÄÅÂÄº
        const allStatusQuery = `
          SELECT DISTINCT row_status, COUNT(*) as count
          FROM memo 
          GROUP BY row_status
          ORDER BY count DESC
        `;
        
        dbReopen.all(allStatusQuery, [], (err, allStatusRows) => {
          if (!err) {
            console.log('üîç ÂÆåÊï¥ÁöÑÁä∂ÊÄÅÂàÜÂ∏ÉÔºàÂåÖÊã¨ÊâÄÊúâÁä∂ÊÄÅÔºâ:');
            diagnostics.push('üîç ÂÆåÊï¥ÁöÑÁä∂ÊÄÅÂàÜÂ∏ÉÔºàÂåÖÊã¨ÊâÄÊúâÁä∂ÊÄÅÔºâ:');
            allStatusRows.forEach(row => {
              const msg = `  "${row.row_status}": ${row.count} Êù°`;
              console.log(msg);
              diagnostics.push(msg);
            });
          }
        });
        
        // Ëé∑ÂèñÊâÄÊúâÁä∂ÊÄÅÁöÑ memo Êï∞ÊçÆÔºàÂåÖÊã¨ÊâÄÊúâÁä∂ÊÄÅÔºå‰ΩÜ‰ºòÂÖàÊòæÁ§∫ÈùûÂà†Èô§Áä∂ÊÄÅÔºâ
        const memoQuery = `
          SELECT 
            id, uid, creator_id, created_ts, updated_ts, 
            row_status, content, visibility, pinned, payload
          FROM memo 
          WHERE row_status IN ('NORMAL', 'ARCHIVED', 'PRIVATE', 'PUBLIC', 'PROTECTED')
             OR row_status IS NULL
             OR row_status NOT IN ('DELETED')
          ORDER BY created_ts DESC
        `;
        
        console.log('üìã Êü•ËØ¢ÊâÄÊúâÈùûÂà†Èô§Áä∂ÊÄÅÁöÑËÆ∞ÂΩï...');
        diagnostics.push('üìã Êü•ËØ¢ÊâÄÊúâÈùûÂà†Èô§Áä∂ÊÄÅÁöÑËÆ∞ÂΩï...');

        dbReopen.all(memoQuery, [], (err, memoRows) => {
          dbReopen.close();

          if (err) {
            reject(new Error(`Êü•ËØ¢Â§áÂøòÂΩïÂ§±Ë¥•: ${err.message}`));
            return;
          }

          const queryMsg = `üîç SQLÊü•ËØ¢ËøîÂõû ${memoRows.length} Êù°ËÆ∞ÂΩï`;
          console.log(queryMsg);
          diagnostics.push(queryMsg);
          
          const memos = [];
          let pinnedCount = 0;
          let totalResourceCount = 0;
          let processedCount = 0;
          let skippedInParsing = 0;
          const skippedRecords = []; // ËÆ∞ÂΩïË∑≥ËøáÁöÑËÆ∞ÂΩïËØ¶ÊÉÖ

          memoRows.forEach((row, index) => {
            try {
              processedCount++;
              const processMsg = `Â§ÑÁêÜËÆ∞ÂΩï ${processedCount}/${memoRows.length}: ID=${row.id}, status=${row.row_status}`;
              console.log(processMsg);
              if (processedCount <= 10 || processedCount % 20 === 0) { // Âè™ËÆ∞ÂΩïÂâç10Êù°ÂíåÊØè20Êù°
                diagnostics.push(processMsg);
              }
              
              // Ê£ÄÊü•ÂøÖË¶ÅÂ≠óÊÆµ
              if (!row.id) {
                const skipMsg = `‚ö†Ô∏è Ë∑≥ËøáÊó†ÊïàËÆ∞ÂΩï(Êó†ID): row_status=${row.row_status || 'null'}, content=${row.content?.substring(0, 50) || 'null'}`;
                console.warn(skipMsg);
                diagnostics.push(skipMsg);
                skippedRecords.push({reason: 'Êó†ID', row_status: row.row_status, content_preview: row.content?.substring(0, 50)});
                skippedInParsing++;
                return;
              }
              
              const pinned = Boolean(row.pinned);
              if (pinned) pinnedCount++;

              // ËΩ¨Êç¢Êó∂Èó¥Êà≥Ôºàmemos ‰ΩøÁî® Unix Êó∂Èó¥Êà≥ÁßíÔºåÈúÄË¶ÅËΩ¨Êç¢‰∏∫ÊØ´ÁßíÔºâ
              const createdAt = new Date(row.created_ts * 1000).toISOString();
              const updatedAt = new Date(row.updated_ts * 1000).toISOString();

              // ÊèêÂèñÊ†áÁ≠æ
              const tagMatches = (row.content || '').match(/#[\u4e00-\u9fa5\w-]+/g) || [];
              const tags = tagMatches.map(tag => tag.slice(1));

              // Ëé∑ÂèñËµÑÊ∫ê
              const memoResources = resourcesMap.get(row.id) || [];
              totalResourceCount += memoResources.length;

              // Â§ÑÁêÜËµÑÊ∫ê‰∏∫ base64 Êï∞ÊçÆ
              const processedResources = memoResources.map(resource => {
                let dataUrl = null;
                if (resource.blob && resource.type && resource.type.startsWith('image/')) {
                  const base64 = Buffer.from(resource.blob).toString('base64');
                  dataUrl = `data:${resource.type};base64,${base64}`;
                }
                return {
                  uid: resource.uid,
                  filename: resource.filename,
                  type: resource.type,
                  size: resource.size,
                  dataUrl: dataUrl
                };
              });

              const memoObj = {
                id: `memos-${row.id}`,
                content: row.content || '',
                tags,
                backlinks: [],
                createdAt,
                updatedAt,
                lastModified: updatedAt,
                timestamp: createdAt,
                processedResources,
                _original: {
                  id: row.id,
                  uid: row.uid,
                  creator_id: row.creator_id,
                  visibility: row.visibility,
                  payload: row.payload,
                  row_status: row.row_status
                }
              };

              memos.push({ memoObj, pinned });
              
            } catch (error) {
              const errorMsg = `‚ùå Â§ÑÁêÜËÆ∞ÂΩï ${row?.id || 'unknown'} Êó∂Âá∫Èîô: ${error.message}`;
              console.error(errorMsg);
              diagnostics.push(errorMsg);
              skippedRecords.push({reason: 'Â§ÑÁêÜÈîôËØØ', id: row?.id, error: error.message});
              skippedInParsing++;
            }
          });

          const parseStatsMsg = `üìä Ëß£ÊûêÁªüËÆ°: Â§ÑÁêÜ‰∫Ü ${processedCount} Êù°ÂéüÂßãËÆ∞ÂΩïÔºåÊàêÂäüËß£Êûê ${memos.length} Êù°ÔºåË∑≥Ëøá ${skippedInParsing} Êù°`;
          console.log(parseStatsMsg);
          diagnostics.push(parseStatsMsg);

          // ÁªüËÆ°ÂêÑÁßçÁä∂ÊÄÅÁöÑËÆ∞ÂΩï
          const statusCounts = {};
          memos.forEach(memo => {
            const status = memo.memoObj._original.row_status;
            statusCounts[status] = (statusCounts[status] || 0) + 1;
          });

          console.log('üìä Ëß£ÊûêÂêéÁöÑËÆ∞ÂΩïÁä∂ÊÄÅÂàÜÂ∏É:');
          diagnostics.push('üìä Ëß£ÊûêÂêéÁöÑËÆ∞ÂΩïÁä∂ÊÄÅÂàÜÂ∏É:');
          Object.entries(statusCounts).forEach(([status, count]) => {
            const msg = `  ${status}: ${count} Êù°`;
            console.log(msg);
            diagnostics.push(msg);
          });

          resolve({
            memos,
            summary: {
              totalMemos: memos.length,
              pinnedMemos: pinnedCount,
              resourceCount: totalResourceCount,
              statusCounts,
              normalMemos: statusCounts.NORMAL || 0,
              archivedMemos: statusCounts.ARCHIVED || 0,
              skippedInParsing,
              processedFromDb: processedCount,
              diagnostics, // Ê∑ªÂä†ËØäÊñ≠‰ø°ÊÅØ
              skippedRecords // Ê∑ªÂä†Ë∑≥ËøáËÆ∞ÂΩïËØ¶ÊÉÖ
            }
          });
        });
      });
      });
      });
    });
  });
}

// Â§ÑÁêÜÂõæÁâáÂºïÁî®ÔºåÂ∞ÜËµÑÊ∫êÂµåÂÖ•Âà∞ÂÜÖÂÆπ‰∏≠
function processContentWithResources(content, resources) {
  let updatedContent = content;

  resources.forEach(resource => {
    if (resource.dataUrl) {
      const imageReference = `![${resource.filename}](${resource.dataUrl})`;
      
      // Â∞ùËØïÊõøÊç¢Áé∞ÊúâÂºïÁî®
      const patterns = [
        new RegExp(`!\\[.*?\\]\\(.*?${resource.uid}.*?\\)`, 'g'),
        new RegExp(`!\\[.*?\\]\\(.*?${resource.filename}.*?\\)`, 'g'),
        new RegExp(`\\[.*?\\]\\(.*?${resource.uid}.*?\\)`, 'g')
      ];

      let foundExisting = false;
      for (const pattern of patterns) {
        if (pattern.test(updatedContent)) {
          updatedContent = updatedContent.replace(pattern, imageReference);
          foundExisting = true;
          break;
        }
      }

      // Â¶ÇÊûúÊ≤°ÊúâÊâæÂà∞Áé∞ÊúâÂºïÁî®ÔºåÊ∑ªÂä†Âà∞Êú´Â∞æ
      if (!foundExisting && !updatedContent.includes(imageReference)) {
        updatedContent = updatedContent.trim() + '\n\n' + imageReference;
      }
    }
  });

  return updatedContent;
}

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Âè™ÊîØÊåÅ POST ËØ∑Ê±Ç' });
  }

  let tempFilePath = null;

  try {
    // Ëß£Êûê‰∏ä‰º†ÁöÑÊñá‰ª∂
    const form = new IncomingForm({
      maxFileSize: 100 * 1024 * 1024, // 100MB
      uploadDir: path.join(process.cwd(), 'data', 'temp'),
      keepExtensions: true
    });
    
    // Á°Æ‰øù‰∏¥Êó∂ÁõÆÂΩïÂ≠òÂú®
    const tempDir = path.join(process.cwd(), 'data', 'temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    const [fields, files] = await form.parse(req);

    const uploadedFile = files.database?.[0];
    if (!uploadedFile) {
      return res.status(400).json({ error: 'Ê≤°Êúâ‰∏ä‰º†Êï∞ÊçÆÂ∫ìÊñá‰ª∂' });
    }

    // È™åËØÅÊñá‰ª∂Á±ªÂûã
    if (!uploadedFile.originalFilename?.toLowerCase().endsWith('.db')) {
      return res.status(400).json({ error: 'ËØ∑‰∏ä‰º† .db Êñá‰ª∂' });
    }

    tempFilePath = uploadedFile.filepath;

    // Â§ÑÁêÜÈ¢ùÂ§ñÁöÑ WAL Âíå SHM Êñá‰ª∂
    const walFile = files.wal?.[0];
    const shmFile = files.shm?.[0];

    if (walFile || shmFile) {
      const dbBaseName = tempFilePath.replace(/\.db$/, '');
      
      if (walFile) {
        const walTargetPath = `${dbBaseName}.db-wal`;
        fs.copyFileSync(walFile.filepath, walTargetPath);
        console.log('üìÇ Â§çÂà∂ WAL Êñá‰ª∂Âà∞:', walTargetPath);
      }
      
      if (shmFile) {
        const shmTargetPath = `${dbBaseName}.db-shm`;
        fs.copyFileSync(shmFile.filepath, shmTargetPath);
        console.log('üìÇ Â§çÂà∂ SHM Êñá‰ª∂Âà∞:', shmTargetPath);
      }
      
      console.log('‚úÖ ÂÆåÊï¥Êï∞ÊçÆÂ∫ìÊñá‰ª∂ÁªÑÂêàÂ∑≤ÂáÜÂ§áÂ∞±Áª™');
    }

    // Ëß£ÊûêÊï∞ÊçÆÂ∫ì
    console.log('ÂºÄÂßãËß£ÊûêÊï∞ÊçÆÂ∫ìÊñá‰ª∂:', uploadedFile.originalFilename);
    const parseResult = await parseMemosDatabase(tempFilePath);
    console.log('Ëß£ÊûêÂÆåÊàê:', parseResult.summary);
    console.log(`üìä Êï∞ÊçÆÂ∫ìÁªüËÆ°: ÊÄªËÆ° ${parseResult.summary.totalMemos} Êù°ËÆ∞ÂΩï`);
    console.log(`üìä Áä∂ÊÄÅÂàÜÂ∏É:`, parseResult.summary.statusCounts);
    console.log(`üìä ËØ¶ÊÉÖ: ÁΩÆÈ°∂ ${parseResult.summary.pinnedMemos} Êù°, ËµÑÊ∫ê ${parseResult.summary.resourceCount} ‰∏™`);
    if (parseResult.summary.skippedInParsing > 0) {
      console.warn(`‚ö†Ô∏è Ëß£ÊûêÈò∂ÊÆµË∑≥Ëøá‰∫Ü ${parseResult.summary.skippedInParsing} Êù°ËÆ∞ÂΩï`);
    }
    
    // Â¶ÇÊûúÊúâË∑≥ËøáÁöÑËÆ∞ÂΩïÔºåËæìÂá∫ËØ¶ÊÉÖ
    if (parseResult.summary.skippedRecords && parseResult.summary.skippedRecords.length > 0) {
      console.log('üìã Ë∑≥ËøáËÆ∞ÂΩïËØ¶ÊÉÖ:');
      parseResult.summary.skippedRecords.forEach((record, index) => {
        console.log(`  ${index + 1}. ${record.reason}: ID=${record.id || 'null'}, status=${record.row_status || 'null'}`);
      });
    }

    // Â§ÑÁêÜÂõæÁâáÂµåÂÖ•
    const processedMemos = parseResult.memos.map(({ memoObj, pinned }) => {
      const updatedContent = processContentWithResources(
        memoObj.content, 
        memoObj.processedResources || []
      );

      return {
        memoObj: {
          ...memoObj,
          content: updatedContent,
          // ‰øùÁïô dataUrl Áî®‰∫éÂõæÁâáÊòæÁ§∫Ôºå‰ΩÜÊ∏ÖÁêÜÂÖ∂‰ªñËæÉÂ§ßÁöÑÂéüÂßãÊï∞ÊçÆ
          processedResources: memoObj.processedResources?.map(r => ({
            uid: r.uid,
            filename: r.filename,
            type: r.type,
            size: r.size,
            dataUrl: r.dataUrl  // ‰øùÁïô dataUrlÔºåËøôÊòØÂõæÁâáÊòæÁ§∫ÂøÖÈúÄÁöÑ
          }))
        },
        pinned
      };
    });

    // Áõ¥Êé•‰ΩøÁî®Êï∞ÊçÆÂ∫ìÂÆû‰æãÊèíÂÖ•Êï∞ÊçÆÔºåÈÅøÂÖç HTTP Ë∂ÖÊó∂ÈóÆÈ¢ò
    const database = getDatabase();
    let insertedCount = 0;
    let pinnedCount = 0;
    let skippedCount = 0;

    // ÊâπÈáèÂ§ÑÁêÜÔºåÊØèÊâπÂ§ÑÁêÜ50Êù°ËÆ∞ÂΩïÔºåÂáèÂ∞ëÂÜÖÂ≠òÂéãÂäõ
    const batchSize = 50;
    const totalBatches = Math.ceil(processedMemos.length / batchSize);
    
    console.log(`ÂºÄÂßãÊâπÈáèÂØºÂÖ• ${processedMemos.length} Êù°ËÆ∞ÂΩïÔºåÂàÜ ${totalBatches} ÊâπÂ§ÑÁêÜ`);

    for (let batchIndex = 0; batchIndex < totalBatches; batchIndex++) {
      const startIndex = batchIndex * batchSize;
      const endIndex = Math.min(startIndex + batchSize, processedMemos.length);
      const batch = processedMemos.slice(startIndex, endIndex);
      
      console.log(`Â§ÑÁêÜÁ¨¨ ${batchIndex + 1}/${totalBatches} Êâπ (${startIndex + 1}-${endIndex})`);

      for (const { memoObj, pinned } of batch) {
        try {
          // Ê£ÄÊü•ÂÜÖÂÆπÂ§ßÂ∞èÔºåË∑≥ËøáËøáÂ§ßÁöÑÂ§áÂøòÂΩï
          const contentSize = new TextEncoder().encode(memoObj.content).length;
          if (contentSize > 500 * 1024) { // 500KB ÈôêÂà∂
            console.warn(`Ë∑≥ËøáËøáÂ§ßÁöÑÂ§áÂøòÂΩï (${Math.round(contentSize/1024)}KB): ${memoObj.content.substring(0, 50)}...`);
            skippedCount++;
            continue;
          }

          // Áõ¥Êé•Ë∞ÉÁî®Êï∞ÊçÆÂ∫ìÊñπÊ≥ïÊèíÂÖ•
          const insertedMemo = database.createMemo({
            content: memoObj.content,
            tags: memoObj.tags.join(','),
            pinned: pinned,
            createdAt: memoObj.createdAt,
            updatedAt: memoObj.updatedAt
          });

          if (insertedMemo) {
            insertedCount++;
            if (pinned) pinnedCount++;
            if (insertedCount % 10 === 0 || insertedCount === processedMemos.length) {
              console.log(`ÊàêÂäüÊèíÂÖ•Â§áÂøòÂΩï ${insertedCount}/${processedMemos.length}: ${memoObj.content.substring(0, 50)}...`);
            }
          }
        } catch (error) {
          console.error(`ÊèíÂÖ•Â§áÂøòÂΩïÂ§±Ë¥•:`, error);
          skippedCount++;
        }
      }
      
      // ÊØèÊâπÂ§ÑÁêÜÂÆåÂêéÁ®ç‰ΩúÊöÇÂÅúÔºåÈáäÊîæ‰∫ã‰ª∂Âæ™ÁéØ
      if (batchIndex < totalBatches - 1) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }

    // ÊúÄÁªàÁªüËÆ°
    console.log(`‚úÖ ÂØºÂÖ•ÂÆåÊàê! ÊàêÂäü: ${insertedCount}, Ë∑≥Ëøá: ${skippedCount}, ÊÄªËÆ°: ${processedMemos.length}`);
    
    // ËøîÂõûÂ§ÑÁêÜÁªìÊûúÔºåÂåÖÂê´ËØ¶ÁªÜËØäÊñ≠‰ø°ÊÅØ
    res.status(200).json({
      success: true,
      data: {
        insertedCount,
        pinnedCount,
        skippedCount,
        totalProcessed: processedMemos.length,
        summary: parseResult.summary,
        message: `ÊàêÂäüÂØºÂÖ• ${insertedCount} Êù°ËÆ∞ÂΩï${skippedCount > 0 ? `, Ë∑≥Ëøá ${skippedCount} Êù°ËøáÂ§ßËÆ∞ÂΩï` : ''}`,
        diagnostics: parseResult.summary.diagnostics, // ËØ¶ÁªÜËØäÊñ≠‰ø°ÊÅØ
        skippedRecords: parseResult.summary.skippedRecords, // Ë∑≥ËøáËÆ∞ÂΩïËØ¶ÊÉÖ
        dbDiscrepancy: parseResult.summary.processedFromDb !== insertedCount ? {
          dbTotal: parseResult.summary.processedFromDb,
          parsedTotal: parseResult.summary.totalMemos,
          importedTotal: insertedCount,
          lostInParsing: parseResult.summary.skippedInParsing,
          lostInImport: skippedCount
        } : null
      }
    });

  } catch (error) {
    console.error('Êï∞ÊçÆÂ∫ìËß£ÊûêÈîôËØØ:', error);
    res.status(500).json({ 
      error: `Ëß£ÊûêÂ§±Ë¥•: ${error.message}` 
    });
  } finally {
    // Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
    if (tempFilePath) {
      try {
        // Ê∏ÖÁêÜ‰∏ªÊï∞ÊçÆÂ∫ìÊñá‰ª∂
        fs.unlinkSync(tempFilePath);
        
        // Ê∏ÖÁêÜÁõ∏ÂÖ≥ÁöÑ WAL Âíå SHM Êñá‰ª∂
        const dbBaseName = tempFilePath.replace(/\.db$/, '');
        const walPath = `${dbBaseName}.db-wal`;
        const shmPath = `${dbBaseName}.db-shm`;
        
        if (fs.existsSync(walPath)) {
          fs.unlinkSync(walPath);
          console.log('üóëÔ∏è Ê∏ÖÁêÜ WAL Êñá‰ª∂:', walPath);
        }
        
        if (fs.existsSync(shmPath)) {
          fs.unlinkSync(shmPath);
          console.log('üóëÔ∏è Ê∏ÖÁêÜ SHM Êñá‰ª∂:', shmPath);
        }
        
      } catch (cleanupError) {
        console.warn('Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•:', cleanupError);
      }
    }
  }
}